import { Doc, Reference, Footnote, HasChildren, HasAttributes, AstNode, Visitor } from "./ast";
import { Options, Warning } from "./options";
interface HTMLRenderOptions extends Options {
    overrides?: Visitor<HTMLRenderer, string>;
}
declare class HTMLRenderer {
    warn: (warning: Warning) => void;
    options: HTMLRenderOptions;
    private tight;
    footnoteIndex: Record<string, number>;
    nextFootnoteIndex: number;
    references: Record<string, Reference>;
    autoReferences: Record<string, Reference>;
    constructor(options: HTMLRenderOptions);
    escape(s: string): string;
    escapeAttribute(s: string): string;
    smartPunctuationMap: Record<string, string>;
    renderAttributes(node: HasAttributes, extraAttrs?: Record<string, string>): string;
    renderTag(tag: string, node: AstNode, extraAttrs?: Record<string, string>): string;
    renderCloseTag(tag: string): string;
    inTags(tag: string, node: HasChildren<AstNode>, newlines: number, extraAttrs?: Record<string, string>): string;
    addBacklink(note: string, ident: number): string;
    renderChildren(node: HasChildren<AstNode>): string;
    renderAstNode(node: AstNode): string;
    renderNotes(notes: Record<string, Footnote>): string;
    renderAstNodeDefault(node: AstNode): string;
    render(doc: Doc): string;
}
declare const renderHTML: (ast: Doc, options?: HTMLRenderOptions) => string;
export type { HTMLRenderOptions };
export { renderHTML, HTMLRenderer };
